-- estos dos metodos que siguen en principio son lo mismo. El consumidor de la tabla es capaz de definir el id.
CREATE TABLE users_1 (
    user_id SERIAL PRIMARY KEY,
    username VARCHAR
);

CREATE TABLE users_2 (
    user_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR
);

INSERT INTO users_2
    (user_id, username)
VALUES
    (1, 'Marcos'),
    (3, 'Cecilia'),
    (18, 'Joaquin'),
    (100, 'Francesco');


-- la forma que sigue no permite definir al consumidor definir el id. El mismo sera autoincremental.
CREATE TABLE users_3 (
    user_id INTEGER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    username VARCHAR
);

-- lo siguiente arrojara error:
-- ERROR:  cannot insert a non-DEFAULT value into column "user_id"
-- DETAIL:  Column "user_id" is an identity column defined as GENERATED ALWAYS.
-- HINT:  Use OVERRIDING SYSTEM VALUE to override.
INSERT INTO users_3
    (user_id, username)
VALUES
    (1, 'Marcos'),
    (3, 'Cecilia'),
    (18, 'Joaquin'),
    (100, 'Francesco');


-- tambien podemos iniciar desde cierto valor, e incluso ir saltando de i en i valores:
CREATE TABLE users_4 (
    user_id INTEGER GENERATED ALWAYS AS IDENTITY (START WITH 200 INCREMENT BY 2) PRIMARY KEY,
    username VARCHAR
);


-- a continuacion se muestra como crear una llave primaria compuesta
CREATE TABLE users_5 (
    id1 INT,
    id2 INT,
    PRIMARY KEY(id1, id2)
);

-- clave primaria con UUID
CREATE TABLE users_6 (
    user_id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
    username VARCHAR
);
